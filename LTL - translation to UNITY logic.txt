I thought you might be interested in knowing that I now have translation rules from LTL to UNITY so that, given an LTL property, part of the design of the system is choosing some elements of the corresponding UNITY properties. The big difference between UNITY and LTL is that UNITY properties are persistent but the LTL ones aren't. So what I do is that I associate a pair with each LTL property to make the UNITY properties based on the initial state.

The first element of the pair is a predicate that must hold initially and the second part is a set of (persistent) UNITY properties. As an example, consider <>p. This means that p is only required to hold once. It can hold more often or not. true ↦ p will be stronger but might also be too strong. Instead, we choose an initial predicate q and form the pair (q, q ↦ p) which means, initially q must hold and whenever it holds, p follows. It can be falsified early on or not. Either way works. Instead of q, we can choose a boolean variable b and decide its role in the design. Here are all the rules with p, q, r state predicates and X, Y LTL formulas, iX and iY their initial predicates and uX and uY their corresponding set of UNITY properties.

	LTL			relative UNITY (as opposed to persistent UNITY)
	p			(p, {})
	[] X			( iX, { invariant iX } ∪ uX )
	<> X		choose p in ( p, { p ↦ iX } ∪ uX )
	X W Y		choose p in ( p, { invariant p ⇒ iX , p ∧ ¬ iY un iY } ∪ uX ∪ uY )
		-- W implies no overlap
	X R Y		choose p in ( p, { invariant p ⇒ iY, p  un  iX ∧ p } ∪ uX ∪ uY )
		-- R has its arguments backward compared to W and implies an overlap
	X U Y		choose p in ( p, { invariant p ⇒ iX, p ↦ iY, p ∧ ¬ iY un iY } ∪ uX ∪ uY )
	X ∨ Y		( iX ∨ iY, uX ∪ uY )
	X ∧ Y		( iX ∧ iY, uX ∪ uY )
	¬ ( [] X )		see <> ¬ X
	¬ ( <> X )	see [] ¬ X
	¬ (X U Y)	see (¬ X) R (¬ Y)
	¬ (X R Y)	see (¬ X) U (¬ Y)
	¬ (X W Y)	¬ (X U Y ∨ []X)
				¬ (X U Y) ∧  ¬ [] X
				( (¬ X) R (¬ Y) ) ∧ <> ¬ X
				(¬ Y) U (¬ X ∧ ¬ Y)
	X ⇒ Y		see ¬ X ∨ Y
	X ≡ Y		see (X ⇒ Y) ∧ (Y ⇒ X)

In the case of []<>q, for the "eventually" part, we can choose the predicate p as true, which makes the invariant of "henceforth" trivial to prove. We land on { true ↦ q } as our set of UNITY properties

Proofs
	p  =  •p
	<>s  =  F ; s
	[] s  =  G s
	s U t  =  (μx :: (X;x ∧ s) ∨ t)
		-- if we had chosen the term (X;x ∨ t) ∧ s, we would force an 
		-- overlap between the last state where s holds and the first 
		-- where t holds
	s W t  =  (νx :: (X;x ∧ s) ∨ (s ∧ 1) ∨ t)
		-- the ∨ (s ∧ 1) is an addition after trying to prove (1)
		-- it covers the case of finite computations better
	s R t  =  (νx :: (X;x ∨ s ∨ 1) ∧ t)
		-- the ∨ 1 is an addition after trying to prove (0). 
		-- it covers the case of finite computations better

Healthiness checks
=================

(0)	¬(s U t) = (¬s) R (¬t)

		   ¬(s U t)
		=	{ unfold U }
		   ¬(μx :: (X;x ∧ s) ∨ t)
		=	{ dual }
		   (νx :: ¬( (X;¬x ∧ s) ∨ t ))
		=	{ ¬ over ∨ and  ∧ }
		   (νx :: (¬X;¬x ∨ ¬s) ∧ ¬t)
		=	{ RMD (41iii) }
		   (νx :: (X;x ∨ ¬s ∨ 1) ∧ ¬t)

If we use the above formulation as a new definition of R, it means that any finite computation can terminate without t happening. Let's see what other choice we have.

		   ¬(νx :: (X;x ∨ s) ∧ t)
		=	{ dual }
		   (μx :: ¬( (X;¬x ∨ s) ∧ t ))
		=	{ distribute ¬ }
		   (μx :: (¬X;¬x ∧ ¬s) ∨ ¬t)
		=	{ RMD (41iii) }
		   (μx :: ( (X;x ∨ 1) ∧ ¬s ) ∨ ¬t)
		=	{ ∧ over ∨ }
		   (μx :: ( (X;x ∧ ¬s) ∨ (1 ∧ ¬s) ) ∨ ¬t)

If we use the last step as a definition for U, it means that a computation can terminate before t becoming true. This would mean that [ s U t  ⇒  F;t ] does not hold which is not attractive at all. We will therefore use (νx :: (X;x ∨ ¬s ∨ 1) ∧ ¬t) as a definition of R instead.

(1)	s W t  =  s U t ∨ G s

We use fixpoint fusion (ref. (C15)) on

	(νx :: (X;x ∧ s) ∨ t)  =  sUt ∨ (νx :: (X;x ∨ 1) ∧ s)

with

	f.x  =  sUt  ∨  x
		(universally conjunctive)
	g.x  =  (X;x ∨ 1) ∧ s

According to our intuition of W, h should be as follows:

	h.x  =  (X;x ∧ s) ∨ t

We are left to prove

	f.(g.x) = h.(f.x)

Looking at the second part of the proof of (C15), we see that we will need something like (C18) to unfold sUt. Our initial guess is that the following will do. Let's try it.

	(a)	sUt  =  (s ∧ X ; (sUt)) ∨ t

		   f.(g.x)
		=	{ definitions }
		   sUt  ∨  ( (X;x ∨ 1) ∧ s )
		=	{ (a) }
		   t ∨ ( X;(sUt) ∧ s ) ∨ ( (X;x ∨ 1) ∧ s )
		=	{ ∧ over ∨ }
		   t ∨ (( X;(sUt) ∨ X;x ∨ 1 ) ∧ s)
		=	{ ; over ∨ }
		   t ∨ (( X;( (sUt) ∨ x ) ∨ 1 ) ∧ s)
		=	{ definition of f }
		   t ∨ (( X;( f.x ) ∨ 1 ) ∧ s)
		=	{ ∧ over ∨ }
		   t ∨ (X;( f.x ) ∧ s) ∨ (1 ∧ s)
		=	{ redefine h.x as (X;x ∧ s) ∨ (1 ∧ s) ∨ t }
		   h.( f.x )

	h.x  =  (X;x ∧ s) ∨ (1 ∧ s) ∨ t

	proof of (a)

		   sUt
		=	{ definition of U }
		   (μx :: (X;x ∧ s) ∨ t)
		=	{ unfolding }
		   ( s ∧ X;(μx :: (X;x ∧ s) ∨ t) ) ∨ t
		=	{ definition of U }
		   ( s ∧ X;(sUt) ) ∨ t

(2)	p un q  =  G (•p  ⇒  •p W •q)
		-- this is not the exact formula we proved
	Let's give a different name to our version of W: 

		sKt = (νx :: (X;x ∧ s) ∨ t)

	we can prove the above by proving •p  ∧  •p K •q  =  (G •p) ; (X ∨ 1) ; •q

A first candidate for this proof is to use fixpoint fusion again. However, both fixpoints are present as subexpressions of their side of the equality.  Let's fix this by using (C4) on the right hand side of the equality to rewrite it  as:

	(νx :: (X;(x ∨ •q) ∨ •q) ∧ •p)

The fixpoint expression on the left hand side is:

	(νx :: (X;x ∧ •p) ∨ •q)

Note: this is not exactly the formulation of p W q. This one prevents a computation to terminate before q holds.
(end of Note)

Then, we can consider the functions inside the fixpoints 

	f.x = X;x
	g.x = x ∧ •p
	h.x = x ∨ •q

and the two expressions are now

	P0:	ν( g ⚬ h ⚬ f ⚬ h )
and
	P1:	ν( h ⚬ g ⚬ f )

In order to calculate properly with them, here are a series of properties on how they interact pairwise.

	(a)	g ⚬ h  =  k ⚬ g
		with 
			k.x = x ∨ (•q ∧ •p)
	(b)	h ⚬ h  =  h
	(c)	g ⚬ g  =  g
	(d)	h ⚬ k  =  h

Let's try to make P0 appear by calculating with P1.

	   ν( h ⚬ g ⚬ f )		
	=	{ (d) }
	   ν( h ⚬ k ⚬ g ⚬ f )
	=	{ rolling }
	   h.( ν(k ⚬ g ⚬ f ⚬ h) )
	=	{ (a) }
	   h.( ν(g ⚬ h ⚬ f ⚬ h) )

Which gives us the equality 

		(νx :: (X;x ∧ •p) ∨ •q)  =  (νx :: (X;(x ∨ •q) ∨ •q) ∧ •p))  ∨  •q

Pretty interesting. What happens if we start calculating directly with P1 however? For the sake of increasing our freedom when manipulating h and g next to one another, let's see what we get when we rewrite h ⚬ g.

	(e)	h ⚬ g  =  t ⚬ h
		with
			t.x = x ∧ (•p ∨ •q)
	(f)	g ⚬ t = t ⚬ g = g

		   ν(g ⚬ h ⚬ f ⚬ h)
		=	{ rolling }
		   (g ⚬ h).( ν(f ⚬ h ⚬ g ⚬ h) )
		=	{ (e) }
		   (g ⚬ h).( ν(f ⚬ t ⚬ h ⚬ h) )
		=	{ (b) }
		   (g ⚬ h).( ν(f ⚬ t ⚬ h) )
		=	{ (f), aiming to make g appear 
				to the right of h with (e)  }
		   (g ⚬ t ⚬ h).( ν(f ⚬ t ⚬ h) )
		=	{ rolling }
		   g.( ν(t ⚬ h ⚬ f) )
		=	{ (e) }
		   g.( ν(h ⚬ g ⚬ f) )

This gives us the expected  result that

	(νx :: (X;(x ∨ •q) ∨ •q) ∧ •p)  =  •p ∧ (νx :: (X;x ∧ •p) ∨ •q)

We now have the two following results:

(2a)		•p  ∧  •p K •q  =  (G •p) ; (X ∨ 1) ; •q
(2b)		•p K •q  =  (G •p) ; (X ∨ 1) ; •q ∨ •q

		*								*
						*

In a previous attempt, we didn't realize that we needed to apply (f) then (e) before apply rolling last.  This gave us the surprising result that

	(νx :: (X;(x ∨ •q) ∨ •q) ∧ •p)  =  (νx :: (X;x ∧ •p) ∨ •q)

It is surprising because the left hand side implies •p but the right hand side does not seem to.  As a matter of fact, •q implies the right hand side and most definitely does not imply •p in general, which it would by transitivity if the above equality held.

Proof of [ •q ⇒ (νx :: (X;x ∧ •p) ∨ •q) ]

		   [ •q  ⇒  (νx :: (X;x ∧ •p) ∨ •q) ]
		⇐	{ induction }
		   [ •q  ⇒  (X;•q ∧ •p) ∨ •q ]
		=	{ weakening }
		   true

This set me to find an error in my last proof. How annoying ...

(3a)	sWt  =  sKt ∨ Gs
(3b)	sKt  =  sWt ∧ (G¬t ⇒ E)

In (3a), there are three ν fixpoints:

		(νx :: (X;x ∧ s) ∨ (1 ∧ s) ∨ t)
		(νx :: (X;x ∧ s) ∨ t)
		(νx :: (X;x ∨ 1) ∧ s)

	Which raises the question: which one is f and which one is g?  Strong of the experience with (5), we choose to treat Gs as one of the fixpoints and sKt ∨ x as the outside function f.

		u = sKt
		f.x  =  u ∨ x
			(universally conjunctive)
		g.x  =  (X;x ∨ 1) ∧ s
		h.x  =  (X;x ∧ s) ∨ (1 ∧ s) ∨ t

Proof of (3a)

		   f.(g.x)
		=	{ definitions }
		   ( (X;x ∨ 1) ∧ s ) ∨ u
		=	{ unfold u }
		   ( (X;x ∨ 1) ∧ s ) ∨ (X;u ∧ s) ∨ (1 ∧ s) ∨ t
		=	{ ∧ over ∨ }
		   ( (X;x ∨ 1 ∨ X;u) ∧ s ) ∨ (1 ∧ s) ∨ t
		=	{ ; over ∨ and f }
		   ( (X;(x ∨ u) ∨ 1) ∧ s ) ∨ (1 ∧ s) ∨ t
		=	{ ∧ over ∨ }
		   (X;(f.x) ∧ s) ∨ (1 ∧ s) ∨ t
		=	{ h }
		   h.(f.x)

Proof of (3b)

	(3a)	sWt  =  sKt ∨ Gs
		sWt ∧ Gs  ⇒  sKt
		sKt  ⇒  sWt
		Gs  ⇒  sWt
	(3b)	sKt  =  sWt ∧ (G¬t ⇒ E)
					F  ⇒  F;t

		   sWt ∧ (G¬t ⇒ E)
		=	{ (3a) }
		   (sKt ∨ Gs) ∧ (G¬t ⇒ E)
		=	{ ∧ over ∨ }
		   (sKt ∧ (G¬t ⇒ E)) ∨ (Gs ∧ (G¬t ⇒ E))
		=	{ (c) }
		   sKt ∨ (Gs ∧ (G¬t ⇒ E))
		=	{ (d) }
		   sKt

	(c)	[ sKt  ⇒  (G¬t ⇒ E) ]

		   sKt ∧ G¬t

	(d)	[ Gs ∧ (G¬t ⇒ E)  ⇒  sKt ]

(4)	•p W •q   =   (G •p);(X∨1);•q  ∨  G •p  ∨  •q

	We use the same technique as in (3)

		s = G •p ∨ •q
		f.x  =  x ∨ s
		g.x  =  (X;x ∧ •p) ∨ •q
		h.x  =  (X;(x ∨ •q) ∨ •q) ∧ •p

			   h.(f.x)
			=	{ definitions }
			   (X;(x ∨ G •p ∨ •q) ∨ •q) ∧ •p
			=	{ ; over ∨ }
			   (X;(x ∨ •q) ∨ •q ∨ X;(G •p)) ∧ •p
			=	{ 

(5)	•p U •q  =  (•p W •q) ∧ F;•q

We use the same technique as in the second part of the proof of (C15), that is fixpoint fusion. (with operator μ)

	s   =   •p W •q
	f.x  =  s ∧ x
		(universally disjunctive)
	g.x  =  X;x ∨ •q
	h.x  =  (X;x ∧ •p) ∨ •q

		   f.(g.x)
		=	{ definitions }
		   s ∧ (X;x ∨ •q)
		=	{ unfold the fixpoint of s }
		   ((X;s ∧ •p) ∨ p ∨ •q) ∧ (X;x ∨ •q)
		=	{ ∨ over ∧ then ∧ over ∨ }
		   (X;s ∧ •p ∧ X;x) ∨ (p ∧ X;x) ∨ •q
		=	{ X;_ is conjunctive; p is a state predicate }
		   (X;( s ∧ x ) ∧ •p) ∨ false ∨ •q
		=	{ definitions }
		   h.(f.x)

Proof of relations between UNITY and LTL

(6a)		[ s W (•p ∧ Gt)  ⇐  sW•p ∧ Gt ]
(6b)		[ (•p ∧ Gs) W t  ≡  •pWt ∧ Gs ]

	(a)	(u ∧ Gs)W(t ∧ Gs)  =  uWt ∧ Gs

		(νx:: (X;x ∧ u) ∨ t)
		(νx:: (X;x ∧ u ∧ Gs) ∨ (t ∧ Gs))
	
	f.x = X;x
		(b)	p ⚬ f = p ⚬ f ⚬ p
			-- persistence

	g.x = x ∧ u
	p.x = x ∧ Gs
		-- commute

	h.x = x ∨ t
	k.x = x ∨ (t ∧ Gs)
		-- h absorbs k
		(c)	p ⚬ h  =  k ⚬ p

		p.( ν(h ⚬ g ⚬ f) )
		ν(k ⚬ p ⚬ g ⚬ f)

		   p.( ν(h ⚬ g ⚬ f) )
		=	{ persistence with ν (d) }
		   p.( ν(p ⚬ h ⚬ g ⚬ f) )
		=	{ rolling }
		   (p ⚬ p).( ν(h ⚬ g ⚬ f ⚬ p) )
		=	{ p is idempotent }
		   p.( ν(h ⚬ g ⚬ f ⚬ p) )
		=	{ rolling }
		   ν(p ⚬ h ⚬ g ⚬ f)
		=	{ (c) }
		   ν(k ⚬ p ⚬ g ⚬ f)

	(d)	persistence with ν
			[ Gs ∧ (νx :: p.x)  =  (νx :: Gs ∧ p.x) ]

		t = Gs ∧ (νx :: p.x)
		p is conjunctive 
		persistence on p

		   [ t  ⇒  (νx :: Gs ∧ p.x) ]
		⇐	{ induction }
		   [ t  ⇒  Gs ∧ p.t ]
		=	{ p is conjunctive }
		   [ t  ⇒  Gs ∧ p.(Gs) ∧ p.(νx :: p.x) ]
		=	{ persistence on p; folding ν }
		   [ t  ⇒  Gs ∧ p.true ∧ (νx :: p.x) ]
		=	{ 

	to be continued


		*						*
					*

		   (νx :: p.x)
		   ¬Gs ∨ (νx :: Gs ∧ p.x)
		=	{ G is idempotent }
		   GGs ∧ (νx :: p.x)
		=	{ fixpoint formulation }
		   (νx :: (X;x ∨ 1) ∧ Gs) ∧ (νx :: p.x)


(7)	•p W •q  =  (∃s:: •(s ∨ q) ∧ G•(s ⇒ p) ∧ (s unless q))
	p unless q  =  G (•p ⇒ •p W •q)

(8)	(¬•p ∧ u ∧ G (•p ⇒ s))  W  (•p ∧ t ∧ G (•p ⇒ s))  =  (¬•p ∧ u)W(•p ∧ t)  ∧ G (•p ⇒ s)